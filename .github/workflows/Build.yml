name: Build packages

on:
  workflow_call:
    secrets:
      ANACONDA_TOKEN:
        description: 'Anaconda Token'
      ANACONDA_USER:
        description: 'Anaconda User'

env:
  ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
  ANACONDA_USER: ${{ secrets.ANACONDA_USER }}
  DEBIAN_FRONTEND: noninteractive
  GHA_MACHINE_TYPE: "n2-standard-4"
  APT_REQUIREMENTS: binutils build-essential csh curl git libgl1 pkg-config sudo wget

defaults:
  run:
    shell: bash

jobs:
  magic-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/magic"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
      - uses: ./ci

  icestorm-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "bit/icestorm"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  prjtrellis-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "bit/prjtrellis"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  prjoxide-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "bit/prjoxide"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  prjxray-db-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "bit/prjxray-db"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  prjxray-tools-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "bit/prjxray-tools"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  icarus-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sim/icarus"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  verilator-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sim/verilator"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  yosys-linux-py37:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "syn/yosys"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  yosys-linux-py38:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "syn/yosys"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  yosys-plugins-symbiflow-linux:
    needs: ["icarus-linux", "yosys-linux-py37", "yosys-linux-py38", "surelog-linux-py37", "surelog-linux-py38"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "syn/yosys-plugins-symbiflow"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  nextpnr-nexus-linux:
    needs: ["prjoxide-linux"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/nextpnr/nexus"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  symbiflow-yosys-plugins-linux:
    needs: ["icarus-linux", "yosys-linux-py37", "yosys-linux-py38", "surelog-linux-py37", "surelog-linux-py38"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "syn/symbiflow-yosys-plugins"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  vtr-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/vtr"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  vtr-gui-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/vtr-gui"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  vtr-optimized-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/vtr-optimized"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  quicklogic-vtr-linux:
    needs: ["vtr-linux"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/quicklogic-vtr"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      # Skip if token isn't available (cross-repository PRs mainly).
      - run: if [ "$ANACONDA_TOKEN" = "" ]; then echo "SKIP=true" >>$GITHUB_ENV; fi
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  quicklogic-vtr-gui-linux:
    needs: ["vtr-gui-linux"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/quicklogic-vtr-gui"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      # Skip if token isn't available (cross-repository PRs mainly).
      - run: if [ "$ANACONDA_TOKEN" = "" ]; then echo "SKIP=true" >>$GITHUB_ENV; fi
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  nextpnr-ice40-linux:
    needs: ["icestorm-linux"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/nextpnr/ice40"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  nextpnr-ecp5-linux:
    needs: ["prjtrellis-linux"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/nextpnr/ecp5"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  nextpnr-generic-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/nextpnr/generic"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  nextpnr-xilinx-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/nextpnr/xilinx"
      OS_NAME: "linux"
      KEEP_ALIVE: "true"
      USE_PYPY: "1"
      SKIP: "true"  # See https://github.com/hdl/conda-eda/issues/191
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install software-properties-common
      - run: add-apt-repository ppa:pypy/ppa
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} pypy
      - uses: ./ci

  nextpnr-fpga_interchange-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/nextpnr/fpga_interchange"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  symbiyosys-linux-py37:
    needs: ["yosys-linux-py37"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "formal/symbiyosys"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
      SKIP: "true"  # See https://github.com/litex-hub/litex-conda-eda/issues/70
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  symbiyosys-linux-py38:
    needs: ["yosys-linux-py38"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "formal/symbiyosys"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.8"
      SKIP: "true"  # See https://github.com/litex-hub/litex-conda-eda/issues/70
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  xilinx-vivado-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "xilinx/vivado"
      OS_NAME: "linux"
      VERSIONS: ${{ format('{0}{1}', github.workspace, '/xilinx/vivado/versions') }}
      SCRIPT: ${{ format('{0}{1}', github.workspace, '/xilinx/vivado/gen_metapackages.sh') }}
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  icestorm-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "bit/icestorm"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  magic-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "misc/magic"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  openroad-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "pnr/openroad"
      OS_NAME: "osx"
      EXTRA_BUILD_ARGS: "--no-test"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  prjtrellis-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "bit/prjtrellis"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  icarus-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "sim/icarus"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  verilator-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "sim/verilator"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  yosys-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "syn/yosys"
      OS_NAME: "osx"
      EXTRA_BUILD_ARGS: "--no-test"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  symbiflow-yosys-plugins-osx:
    runs-on: "macos-latest"
    needs: ["icarus-osx", "yosys-osx"]
    env:
      PACKAGE: "syn/symbiflow-yosys-plugins"
      OS_NAME: "osx"
      SKIP: "true"  # See https://github.com/litex-hub/litex-conda-eda/issues/71
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  vtr-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "pnr/vtr"
      OS_NAME: "osx"
      SKIP: "true"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  vtr-gui-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "pnr/vtr-gui"
      OS_NAME: "osx"
      SKIP: "true"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  nextpnr-ice40-osx:
    runs-on: "macos-latest"
    needs: ["icestorm-osx"]
    env:
      PACKAGE: "pnr/nextpnr/ice40"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  nextpnr-generic-osx:
    runs-on: "macos-latest"
    env:
      PACKAGE: "pnr/nextpnr/generic"
      OS_NAME: "osx"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  icestorm-windows:
    runs-on: "windows-latest"
    env:
      PACKAGE: "bit/icestorm"
      OS_NAME: "windows"
      SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/251
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  prjtrellis-windows:
    runs-on: "windows-latest"
    env:
      PACKAGE: "bit/prjtrellis"
      OS_NAME: "windows"
      SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/201
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  icarus-windows:
    runs-on: "windows-latest"
    env:
      PACKAGE: "sim/icarus"
      OS_NAME: "windows"
      SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/251
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  yosys-windows:
    runs-on: "windows-latest"
    env:
      PACKAGE: "syn/yosys"
      OS_NAME: "windows"
      SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/224
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  nextpnr-ice40-windows:
    runs-on: "windows-latest"
    needs: ["icestorm-windows"]
    env:
      PACKAGE: "pnr/nextpnr/ice40"
      OS_NAME: "windows"
      SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/120
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  nextpnr-generic-windows:
    runs-on: "windows-latest"
    env:
      PACKAGE: "pnr/nextpnr/generic"
      OS_NAME: "windows"
      SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/120
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  verible-linux:
    runs-on: "ubuntu-20.04"
    env:
      PACKAGE: "sv-front/verible"
      USE_SYSTEM_GCC_VERSION: "9"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  tree-sitter-verilog-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/tree-sitter-verilog"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  odin-ii-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/odin_II"
      OS_NAME: "linux"
      SKIP: "true"  # See https://github.com/hdl/conda-eda/issues/209
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libgmp-dev
      - uses: ./ci

  slang-linux:
    runs-on: "ubuntu-20.04"
    env:
      PACKAGE: "sv-front/slang"
      OS_NAME: "linux"
      USE_SYSTEM_GCC_VERSION: "9"
    steps:
      - uses: actions/checkout@v3
      - uses: ./ci

  sv-parser-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/sv-parser"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  moore-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/moore"
      OS_NAME: "linux"
      SKIP: "true"  # See https://github.com/hdl/conda-eda/issues/163
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  surelog-linux-py37:
    needs: ["libunwind", "gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/surelog"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  surelog-linux-py38:
    needs: ["libunwind", "gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/surelog"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  surelog-uhdm-linux-py37:
    needs: ["libunwind", "gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/surelog-uhdm"
      USE_SYSTEM_GCC_VERSION: "9"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
      - uses: ./ci

  surelog-uhdm-linux-py38:
    needs: ["libunwind", "gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/surelog-uhdm"
      USE_SYSTEM_GCC_VERSION: "9"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
      - uses: ./ci

  yosys-uhdm-linux-py37:
    needs: ["libunwind", "gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "syn/yosys-uhdm"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  yosys-uhdm-linux-py38:
    needs: ["libunwind", "gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "syn/yosys-uhdm"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  libunwind:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/libunwind"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  gperftools:
    needs: ["libunwind"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/gperftools"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  verilator-uhdm-linux-py37:
    needs: ["gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sim/verilator-uhdm"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
      - uses: ./ci

  verilator-uhdm-linux-py38:
    needs: ["gperftools"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sim/verilator-uhdm"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
      - uses: ./ci

  netgen-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/netgen"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  zachjs-sv2v-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sv-front/zachjs-sv2v"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libgmp-dev
      - uses: ./ci

  open_pdks-linux-sky130a:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    needs: ["magic-linux"]
    env:
      PACKAGE: "misc/open_pdks/sky130a"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
      - uses: ./ci

  open_pdks-linux-gf180mcuc:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    needs: ["magic-linux"]
    env:
      PACKAGE: "misc/open_pdks/gf180mcuc"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1        
      - uses: ./ci

  openroad-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "pnr/openroad"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  xls-linux:
    runs-on: [self-hosted, Linux, X64]
    # uses older ubuntu for better compat:
    # https://github.com/hdl/conda-eda/issues/199
    container: ubuntu:18.04
    env:
      PACKAGE: "hls/xls"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  openlane-linux:
    needs: ["magic-linux", "netgen-linux", "openroad-linux", "yosys-linux-py37", "yosys-linux-py38"]
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/openlane"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
      - uses: ./ci

  xschem-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/xschem"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} xorg-dev tcl-dev
      - uses: ./ci

  klayout-linux-py37:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "misc/klayout"
      OS_NAME: "linux"
      PYTHON_VERSION: "3.7"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci

  ngspice-linux:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:20.04
    env:
      PACKAGE: "sim/ngspice"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci
